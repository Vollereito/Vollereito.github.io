<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>yangcli-pro Introduction</title>
    <link href="/2023/10/23/yangcli_1/"/>
    <url>/2023/10/23/yangcli_1/</url>
    
    <content type="html"><![CDATA[<h2 id="yangcli-pro-Introduction"><a href="#yangcli-pro-Introduction" class="headerlink" title="yangcli-pro Introduction"></a>yangcli-pro Introduction</h2><h3 id="Variables-变量"><a href="#Variables-变量" class="headerlink" title="Variables |  变量"></a>Variables |  变量</h3><p>yangcli-pro 程序使用多种类型的用户可访问变量。这些变量可以使用“show vars”命令和其他命令列出。<br>变量引用由 1 或 2 个美元符号 (‘$’) 组成，后跟有效的标识符字符串（例如 $$global-log 或 $local-log ）<br>变量的长度可以是 1 个或多个字符，并遵循标识符名称的 YANG 规则。</p><ul><li>第一个字符必须是字母“A”到“Z”或“a”到“z”。</li><li>到最后 2 个 nd 字符可以是字母“A”到“Z”或“a”到“z”、数字（“0”到“9”）、下划线（“_” )、短划线 (‘-‘) 或句点 (‘.’) 字符。</li></ul><p>支持 4 类参数：</p><ul><li>只读系统变量</li><li>读写系统变量</li><li>读写全局用户变量（保存在 $HOME&#x2F;.yuma 目录下）</li><li>读写本地用户变量</li></ul><p>如果引用了不存在的变量（在语句的右侧），则会出现错误。<br>前 3 种类型是全局变量，这意味着它们可用于所有脚本的所有运行级别。最后一种类型称为局部变量，仅对当前脚本（或交互式 shell）的当前运行级别可见。有关运行级别的更多详细信息，请参阅以下部分。</p><h3 id="Variable-Syntax-变量语法"><a href="#Variable-Syntax-变量语法" class="headerlink" title="Variable Syntax | 变量语法"></a>Variable Syntax | 变量语法</h3><p>| Syntax 句法  | Description 描述  | Example 例子 |<br>| :—– ——- |:—– ———-:| —    –:|<br>|    $$&lt;变量名&gt;     | 左侧：将全局变量设置为某个值 | $$saved_get &#x3D; get |<br>|    $$&lt;变量名&gt;    | 右侧：访问全局变量的值        | fill –target&#x3D;$$mytarget |<br>|  $&lt;变量名&gt; | 左侧：将局部变量设置为某个值       |  $myloglevel &#x3D; $$log-level |<br>|  $&lt;变量名&gt; | 右侧：访问具有该名称的任何变量的值       |   $myuser &#x3D; $user |</p><h3 id="Read-only-System-Variables"><a href="#Read-only-System-Variables" class="headerlink" title="Read-only System Variables"></a>Read-only System Variables</h3><p>下表显示了 yangcli-pro 中可作为只读全局变量使用的 unix 环境变量。这些变量在程序启动时设置一次，并且不能在赋值语句的左侧使用</p><table><thead><tr><th>Variable</th><th>Description 描述</th></tr></thead><tbody><tr><td>$$HOME</td><td>$HOME环境变量</td></tr><tr><td>$$HOSTNAME</td><td>$HOST 或 $HOSTNAME 环境变量</td></tr><tr><td>$$LANG</td><td>$LANG environment variable</td></tr><tr><td>$$PWD</td><td>$PWD environment variable, when yangcli-pro was invoked</td></tr><tr><td>$$SHELL</td><td>$SHELL environment variable</td></tr><tr><td>$$USER</td><td>$USER environment variable</td></tr><tr><td>$$YUMAPRO_DATAPATH</td><td>$YUMAPRO_DATAPATH environment variable</td></tr><tr><td>$$YUMAPRO_HOME</td><td>$YUMAPRO_HOME environment variable</td></tr><tr><td>$$YUMAPRO_MODPATH</td><td>$YUMAPRO_MODPATH environment variable</td></tr><tr><td>$$YUMAPRO_RUNPATH</td><td>$YUMAPRO_RUNPATH environment variable</td></tr></tbody></table><h3 id="Read-write-System-Variables"><a href="#Read-write-System-Variables" class="headerlink" title="Read-write System Variables"></a>Read-write System Variables</h3><p>下表显示了可以读取或更改（但不能删除）的 CLI 配置参数。如果在程序调用期间未设置特定参数，则关联变量将包含空字符串。</p><table><thead><tr><th>Variable</th><th>Description 描述</th></tr></thead><tbody><tr><td>$$HOME</td><td>$HOME环境变量</td></tr><tr><td>$$aliases-file</td><td>–aliases-file configuration parameter</td></tr><tr><td>$$allow-shell</td><td>–allow-shell configuration parameter</td></tr><tr><td>$$alt-names</td><td>–alt-names configuration parameter</td></tr><tr><td>$$ask-password</td><td>–ask-password configuration parameter</td></tr><tr><td>$$auto-discard-changes</td><td>–auto-discard-changes parameter</td></tr><tr><td>$$auto-keepalive</td><td>–auto-keepalive configuration parameter</td></tr><tr><td>$$auto-reconnect</td><td>–auto-reconnect configuration parameter</td></tr><tr><td>$$auto-reconnect-interval</td><td>–auto-reconnect-interval configuration parameter</td></tr><tr><td>$$auto-reconnect-max</td><td>–auto-reconnect-max configuration parameter</td></tr><tr><td>$$autoaliases</td><td>–autoaliases configuration parameter</td></tr><tr><td>$$autocomp</td><td>–autocomp configuration parameter</td></tr><tr><td>$$autoconfig</td><td>–autoconfig configuration parameter</td></tr><tr><td>$$autoconfig-conf-mode</td><td>–autoconfig-conf-mode configuration parameter</td></tr><tr><td>$$autodevices</td><td>–autodevices configuration parameter</td></tr><tr><td>$$autoeventhandlers</td><td>–autoeventhandlers configuration parameter</td></tr><tr><td>$$autohistory</td><td>–autohistory configuration parameter</td></tr><tr><td>$$autoload</td><td>–autoload configuration parameter</td></tr><tr><td>$$autoload-cache</td><td>–autoload-cache configuration parameter</td></tr><tr><td>$$autoload-get</td><td>–autoload-get configuration parameter</td></tr><tr><td>$$autoload-save-cache</td><td>–autoload-save-cache configuration parameter</td></tr><tr><td>$$autonotif</td><td>–autonotif configuration parameter</td></tr><tr><td>$$autonvsave</td><td>–autonvsave configuration parameter</td></tr><tr><td>$$autoschemaservers</td><td>–autoschemaservers configuration parameter</td></tr><tr><td>$$autosessions</td><td>–autosessions configuration parameter</td></tr><tr><td>$$autotest</td><td>–autotest configuration parameter</td></tr><tr><td>$$autousers</td><td>–autousers configuration parameter</td></tr><tr><td>$$autouservars</td><td>–autouservars configuration parameter</td></tr><tr><td>$$bad-data</td><td>–bad-data configuration parameter</td></tr><tr><td>$$break-key-mode</td><td>–break-key-mode configuration parameter</td></tr><tr><td>$$callhome-address</td><td>–callhome-address configuration parameter</td></tr><tr><td>$$callhome-enabled</td><td>–callhome-enabled configuration parameter</td></tr><tr><td>$$callhome-port</td><td>–callhome-port configuration parameter</td></tr><tr><td>$$callhome-tls-port</td><td>–callhome-tls-port configuration parameter</td></tr><tr><td>$$check-output</td><td>–check-output configuration parameter</td></tr><tr><td>$$check-output-error</td><td>–check-output-error configuration parameter</td></tr><tr><td>$$check-replies</td><td>–check-replies configuration parameter</td></tr><tr><td>$$check-replies-error</td><td>–check-replies-error configuration parameter</td></tr><tr><td>$$config-autosave</td><td>–config-autosave configuration parameter</td></tr><tr><td>$$config-commit-mode</td><td>–config-commit-mode configuration parameter</td></tr><tr><td>$$config-edit-mode</td><td>–config-edit-mode configuration parameter</td></tr><tr><td>$$default-module</td><td>–default-module configuration parameter</td></tr><tr><td>$$default-operation</td><td><default-operation> parameter for <edit-config> operations</td></tr><tr><td>$$display-mode</td><td>–display-mode configuration parameter</td></tr><tr><td>$$echo-notif-loglevel</td><td>–echo-notif-loglevel configuration parameter</td></tr><tr><td>$$echo-notifs</td><td>–echo-notifs configuration parameter</td></tr><tr><td>$$echo-replies</td><td>–echo-replies configuration parameter</td></tr><tr><td>$$encoding</td><td>–encoding configuration parameter</td></tr><tr><td>$$error-option</td><td><error-option> parameter for <edit-config> operations</td></tr><tr><td>$$fill-optional</td><td>–fill-optional configuration parameter</td></tr><tr><td>$$fixorder</td><td>–fixorder configuration parameter</td></tr><tr><td>$$help-width</td><td>–help-width configuration parameter</td></tr><tr><td>$$ignore-missing-vars</td><td>–ignore-missing-vars configuration parameter</td></tr><tr><td>$$indent</td><td>–indent configuration parameter</td></tr><tr><td>$$keepalive-interval</td><td>–keepalive-interval configuration parameter</td></tr><tr><td>$$leaflist-multi-line</td><td>–leaflist-multi-line configuration parameter</td></tr><tr><td>$$log-level</td><td>–log-level configuration parameter</td></tr><tr><td>$$match-names</td><td>–match-names configuration parameter</td></tr><tr><td>$$message-indent</td><td>–message-indent configuration parameter</td></tr><tr><td>$$optional</td><td>–optional configuration parameter</td></tr><tr><td>$$prompt</td><td>–prompt configuration parameter (yp-shell only)</td></tr><tr><td>$$prompt-type</td><td>–prompt-type configuration parameter</td></tr><tr><td>$$save-session-vars</td><td>–save-session-vars configuration parameter</td></tr><tr><td>$$script-input</td><td>–script-input configuration parameter</td></tr><tr><td>$$server</td><td>–server configuration parameter</td></tr><tr><td>$$shell-command</td><td>–shell-command configuration parameter</td></tr><tr><td>$$ssl-fallback-ok</td><td>–ssl-fallback-ok configuration parameter</td></tr><tr><td>$$term-length</td><td>–term-length configuration parameter</td></tr><tr><td>$$test-option</td><td><test-option> parameter for the <edit-config> operation</td></tr><tr><td>$$test-suite-file</td><td>–test-suite-file configuration parameter</td></tr><tr><td>$$time-rpcs</td><td>–time-rpcs configuration parameter</td></tr><tr><td>$$time-rpcs-stats</td><td>–time-rpcs-stats configuration parameter</td></tr><tr><td>$$time-rpcs-stats-file</td><td>–time-rpcs-stats-file configuration parameter</td></tr><tr><td>$$timeout</td><td>–timeout configuration parameter</td></tr><tr><td>$$use-data-templates</td><td>–use-data-templates configuration parameter</td></tr><tr><td>$$use-rawxml</td><td>–use-rawxml configuration parameter</td></tr><tr><td>$$use-session-vars</td><td>–use-session-vars configuration parameter</td></tr><tr><td>$$use-traceid</td><td>–use-traceid configuration parameter</td></tr><tr><td>$$use-xmlheader</td><td>–use-xmlheader configuration parameter</td></tr><tr><td>$$user</td><td>–user configuration parameter</td></tr><tr><td>$$uservars-file</td><td>–uservars-file configuration parameter</td></tr><tr><td>$$with-defaults</td><td><with-defaults> retrieval parameter</td></tr><tr><td>$$with-term-msg</td><td>–with-term-msg configuration parameter</td></tr></tbody></table><h3 id="Read-write-Global-User-Variables-读写全局用户变量-"><a href="#Read-write-Global-User-Variables-读写全局用户变量-" class="headerlink" title="Read-write Global User Variables | 读写全局用户变量 "></a>Read-write Global User Variables | 读写全局用户变量 </h3><p>如果在赋值语句的左侧使用了无法识别的全局变量（例如 $$foo），则将使用该名称创建一个全局用户变量。如果全局用户变量已经存在，那么它的值将被覆盖。</p><p>uservars 命令可用于加载或存储这些变量，以便它们在引导时加载。默认情况下，用于存储这些变量的 XML 文件是 $HOME&#x2F;.yumapro&#x2F;yangcli-pro_uservars.xml 。</p><h3 id="Read-write-Local-User-Variables"><a href="#Read-write-Local-User-Variables" class="headerlink" title="Read-write Local User Variables"></a>Read-write Local User Variables</h3><p>如果在赋值语句的左侧使用局部变量（例如 $foo），则将使用该名称创建一个局部用户变量。如果本地用户变量已经存在，那么它的值将被覆盖。如果变量是在脚本内创建的（即运行级别大于零），则当脚本退出时它将被删除。</p><h3 id="Read-write-Session-User-Variables"><a href="#Read-write-Session-User-Variables" class="headerlink" title="Read-write Session User Variables"></a>Read-write Session User Variables</h3><p>如果 $$use-sessionvars 变量为 true，则全局变量将被视为特定于会话的变量，而活动会话是命名会话。在这种情况下，如果在赋值语句的左侧使用了无法识别的全局变量（例如 $$foo），则将使用该名称创建会话用户变量。如果会话用户变量已经存在，则其值将被覆盖。<br>如果使用数据模板，则会话特定的变量将用于替换模板内的变量引用，而不是全局变量。</p><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><p>文件内容可以在yangcli-pro语句中使用，类似于用户变量。<br>文件引用由“@”字符（“@”）组成，后跟有效的文件规范</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">session1</span>&gt; @<span class="hljs-string">foo</span>.<span class="hljs-string">yang</span> = <span class="hljs-built_in">get-schema</span> <span class="hljs-built_in">--identifier=foo</span> <span class="hljs-built_in">--format=YANG</span><br><br><span class="hljs-string">session1</span>&gt; <span class="hljs-string">mgrload</span> <span class="hljs-built_in">--module=foo</span><br><br></code></pre></td></tr></table></figure><ul><li>如果文件扩展名是“.yang”、“.log”、“.txt”或“.text”，那么该值（或命令输出）将被保存，并且yangcli-pro将剥离最外层的XML（如果需要）将请求的文件保存为纯文本文件。</li><li>如果文件扩展名为“.json”，则文件将以 JSON 格式保存。</li><li>否则，文件将以 XML 格式保存。用户设置的显示模式会影响 XML 输出。<ul><li>如果显示模式为“xml-nons”，则将生成不带命名空间 (xmlns) 属性的 XML，而不是正常的 XML。</li></ul></li></ul><p>文件还可以用作命令中的参数替换。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">session1&gt; <span class="hljs-variable">$saved_get</span> = <span class="hljs-built_in">get</span> <span class="hljs-attribute">--filter</span>=@filter.xml <span class="hljs-attribute">--with-defaults</span>=explicit<br><br></code></pre></td></tr></table></figure><p>如果引用的文件不存在或无法读取，则会发生错误。</p><h2 id="Scripts-脚本"><a href="#Scripts-脚本" class="headerlink" title="Scripts |  脚本"></a>Scripts |  脚本</h2><p>任何命令都可以在交互式 shell 中输入，或者存储在脚本文件中，并使用 run 命令调用。脚本只是文本文件，使用的扩展名并不重要。<br>目前还没有像 RPC 操作那样的正式脚本模板。相反，位置参数可以传递给任何脚本。</p><p>名为“–P1”到“–P9”的参数最多允许将 9 个参数传递给任何脚本。在每个脚本中，编号参数“$1”到“$9”可用，并且包含调用脚本时作为相应的 –Pn 参数传递的值。<br>如果一行仅包含可选空格，后跟井号字符“#”，则该行将被视为注释。这些行将被跳过。</p><p>如果在脚本内的命令期间发生错误，或者在 NETCONF 会话期间从服务器接收到 ，则正在运行的脚本将被取消，如果这是嵌套脚本，则所有父脚本也将被取消被取消。</p><p>Script Example: 脚本示例：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">&gt; run <span class="hljs-keyword">connect</span> --P1=andy --P2==localhost --P3=yangrocks<br><br>// <span class="hljs-keyword">connect</span> script<br><br><span class="hljs-comment"># start a NETCONF session</span><br>$user = $1<br>$server = $2<br>$password = $3<br><br>&gt; <span class="hljs-keyword">connect</span> --user=$user --server=$server --password=$password<br></code></pre></td></tr></table></figure><h3 id="Run-Levels-运行级别"><a href="#Run-Levels-运行级别" class="headerlink" title="Run Levels |  运行级别"></a>Run Levels |  运行级别</h3><p>运行命令可以出现在脚本中。<br>当 yangcli-pro 启动时，无论是交互模式还是批处理模式，脚本解释器都处于运行级别零。每次调用运行命令时，无论是在命令行还是在当前调用的脚本中，都会分配具有下一个更高值的新运行级别。局部变量仅在当前运行级别内可见。<br>yangcli-pro 最多支持 512 个运行级别。<br>脚本可以递归调用，但需要使用停止条件来中断递归（例如，从条件代码块内调用脚本）。</p><h3 id="Conditional-Command-Blocks-条件命令块"><a href="#Conditional-Command-Blocks-条件命令块" class="headerlink" title="Conditional Command Blocks | 条件命令块"></a>Conditional Command Blocks | 条件命令块</h3><p>if、elif、else 和 end 命令用于创建“if 命令序列”,参考<a href="https://docs.yumaworks.com/en/latest/yangcli/introduction.html#commands">Commands</a><br>这些命令之间出现的任何其他命令都是条件命令块的一部分。<br>这些块可以嵌套。当前条件状态是继承的，因此 false 条件块中的 if 命令序列将不会被执行。一个块可以包含零个或多个命令行，<br>这些命令的工作方式与 Python 等程序语言中的“if”表达式完全相同。请注意，缩进并不重要，但它可以用来使脚本更具可读性。</p><p>if 命令启动一个新的 if 命令序列。接下来是条件命令块。当遇到同一 if 命令块中的 elif、else 或 end 命令时，该块结束。<br>if 命令序列中最多只会执行一个条件代码块。一旦条件命令块被执行，任何剩余的块将被跳过。<br>当前脚本运行级别可用的所有用户和系统变量都可以在 XPath 表达式中使用，以确定条件块状态（true 或 false）。</p><h3 id="Conditional-Command-Loop-Blocks-条件命令循环块"><a href="#Conditional-Command-Loop-Blocks-条件命令循环块" class="headerlink" title="Conditional Command Loop Blocks | 条件命令循环块"></a>Conditional Command Loop Blocks | 条件命令循环块</h3><p>while 和 end 命令用于创建“while 循环序列”。<br>这些命令之间出现的任何其他命令都是条件命令循环块的一部分。<br>这些块可以嵌套。当前条件状态是继承的，因此 false 条件块内的 while 循环序列将不会被执行。一个块可以包含零个或多个命令行，循环条件可以是常量表达式。 maxloops 参数将防止无限循环，并且可用于将 while 循环序列用作简单的“for”循环，迭代特定次数。<br>当前脚本运行级别可用的所有用户和系统变量都可以在 XPath 表达式中使用，以确定条件块状态（继续或终止循环）。<br>以下脚本没有做任何有用的工作。提供它是为了演示一些简单的脚本结构。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># Sample Script 1</span><br><br><span class="hljs-variable">$x</span> = 0<br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;$x &lt; 2&#x27;</span><br>  # this is a comment<br>  log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;start 1&#x27;</span><br>  <span class="hljs-variable">$x</span> = eval <span class="hljs-string">&#x27;$x + 1&#x27;</span><br>  <span class="hljs-variable">$y</span> = 0<br>  <span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;$y &lt; 4&#x27;</span><br>    log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;start 2&#x27;</span><br>    <span class="hljs-variable">$y</span> = eval <span class="hljs-string">&#x27;$y + 1&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;module-loaded(&#x27;test&#x27;)&quot;</span><br>      log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;module test loaded&#x27;</span><br>    elif <span class="hljs-string">&#x27;$x &gt; 1&#x27;</span><br>      log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;x&gt;1&#x27;</span><br>    elif <span class="hljs-string">&quot;feature-enabled(&#x27;test3&#x27;, &#x27;feature1&#x27;)&quot;</span><br>      log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;feature1&#x27;</span><br>    <span class="hljs-keyword">else</span><br>      log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;else&#x27;</span><br>    end<br>    log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;end 2&#x27;</span><br><br>  end<br>  log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;end 1&#x27;</span><br>end<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;feature-enabled(&#x27;test5&#x27;, &#x27;feature-foo&#x27;)&quot;</span><br>  log-<span class="hljs-built_in">info</span> <span class="hljs-string">&#x27;feature-foo&#x27;</span><br>  <span class="hljs-built_in">run</span> add-foo-parms<br>end<br></code></pre></td></tr></table></figure><p>以下脚本演示了如何对 ietf-interfaces.yang 数据模块运行多个编辑：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"># Sample Script <span class="hljs-number">2</span><br><br>$x = <span class="hljs-number">0</span><br>$y = <span class="hljs-built_in">int</span>erfaces<br>$z = <span class="hljs-keyword">interface</span><br>$<span class="hljs-symbol">value</span> = <span class="hljs-symbol">ianaift</span>:<span class="hljs-symbol">l2vlan</span><br><br><span class="hljs-symbol">while</span> &#x27;$<span class="hljs-symbol">x</span> &lt; <span class="hljs-symbol">5</span>&#x27;<br>    <span class="hljs-symbol">create</span> /<span class="hljs-symbol">if</span>:$<span class="hljs-symbol">y</span>/<span class="hljs-symbol">if</span>:$<span class="hljs-symbol">z</span>[<span class="hljs-symbol">if</span>:<span class="hljs-symbol">name</span>=&#x27;<span class="hljs-symbol">vlan</span>$<span class="hljs-symbol">x</span>&#x27;]/<span class="hljs-symbol">if</span>:<span class="hljs-symbol">type</span> <span class="hljs-symbol">value</span>=$<span class="hljs-symbol">value</span><br>    <span class="hljs-symbol">commit</span><br>    $<span class="hljs-symbol">x</span> = <span class="hljs-symbol">eval</span> &#x27;$<span class="hljs-symbol">x</span> + <span class="hljs-symbol">1</span>&#x27;<br><span class="hljs-symbol">end</span><br><br></code></pre></td></tr></table></figure><h2 id="Configuration-Mode-Editing"><a href="#Configuration-Mode-Editing" class="headerlink" title="Configuration Mode Editing"></a>Configuration Mode Editing</h2><p>如果当前会话连接到服务器，则可以使用配置模式（通常称为“配置模式”）。否则，进入配置模式的请求将被拒绝并显示错误消息。<br>这种附加编辑模式类似于路由器命令行界面。它可用于通过简化的界面编辑 YANG 数据存储节点：</p><ul><li>有少量配置模式命令可用</li><li>所有YANG配置数据节点名称都是命令关键字</li><li>数据节点名称可以缩写，就像RPC操作参数名称一样</li><li>数据节点名称的制表符补全是上下文相关的，并且基于会话中可用的 YANG 模块</li><li>当前上下文节点可以更改为配置中不同的 YANG 数据节点，这些节点称为子模式</li><li>命令序列遵循 YANG 数据节点层次结构</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">XPath Example:<br><br>   /<span class="hljs-built_in">int</span>erfaces/<span class="hljs-keyword">interface</span>[<span class="hljs-symbol">name</span>=&#x27;<span class="hljs-symbol">eth0</span>&#x27;]<br><br><span class="hljs-symbol">CLI</span> <span class="hljs-symbol">Example</span>:<br><br>   <span class="hljs-symbol">interfaces</span> <span class="hljs-symbol">interface</span> <span class="hljs-symbol">eth0</span><br><br><span class="hljs-symbol">CLI</span> <span class="hljs-symbol">Example</span> <span class="hljs-symbol">With</span> <span class="hljs-symbol">Allowed</span> <span class="hljs-symbol">Keyword</span> <span class="hljs-symbol">Matching</span>:<br><br>   <span class="hljs-symbol">int</span> <span class="hljs-symbol">int</span> <span class="hljs-symbol">eth0</span><br><br></code></pre></td></tr></table></figure><ul><li>列表条目后面始终跟随所有关键叶值（例如，接口 eth0）。<ul><li>省略了键叶的名称（例如，在“interface”之后未指定“name”）</li><li>如果键值有任何空格或特殊字符，则需要用引号引起来</li></ul></li></ul><h2 id="Configuration-Mode-Variations-配置模式变化"><a href="#Configuration-Mode-Variations-配置模式变化" class="headerlink" title="Configuration Mode Variations |  配置模式变化"></a>Configuration Mode Variations |  配置模式变化</h2><p>有一些 CLI 参数会影响配置模式的工作方式。每个参数还可以有一个相应的系统变量，可以在运行时而不是程序调用时设置。</p><p>有一些 CLI 参数会影响配置模式的工作方式。每个参数还可以有一个相应的系统变量，可以在运行时而不是程序调用时设置。</p><ul><li><p>–autocomp：如果设置为“false”，则仅允许使用精确的节点名称。默认值为“true”，允许部分匹配关键字。</p></li><li><p>–autoconfig：如果设置为“false”，则制表符补全可能不可用。如果为“true”，则维护“正在运行”数据存储的副本。这是填充现有节点和值所必需的。</p></li><li><p>–autoconfig-conf-mode：如果“autoconfig”设置为“false”，并且此参数也设置为“false”，则某些选项卡完成功能将不可用。</p></li><li><p>–with-enable-mode：仅在“yp-shell”中可用。如果为“true”，则必须先进入启用模式，然后才能进入配置模式。</p></li><li><p>–restrict-edit-mode：仅在“yp-shell”中可用。如果为“true”，则配置模式是用户可用的唯一编辑模式。</p></li><li><p>–config-autosave：控制如何将编辑内容保存到服务器上的 NV 存储中。</p></li><li><p>–config-commit-mode：如果为“true”，则编辑将应用于“候选”数据存储。这允许以任何顺序将编辑发送到服务器，然后使用 commit 命令一次性应用所有内容。</p></li><li><p>–config-edit-mode：这个最重要的参数控制如何将编辑应用到服务器。 apply 和 exit 命令的工作方式有所不同，具体取决于此参数。</p></li></ul><p>有3种模式：<br>    - line：输入每行后，编辑将自动应用。<br>    - level：使用 exit 命令自动应用编辑，或使用 apply 命令手动应用。这是默认模式<br>    - manual手动：仅使用 apply 命令手动应用编辑。</p><p>有关更多详细信息，请参阅 config-edit-mode 示例部分。<a href="https://docs.yumaworks.com/en/latest/cli/yangcli-pro.html#config-edit-mode-examples">config-edit-mode</a></p><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>该从哪开始 …   …</p>]]></content>
    
    
    
    <tags>
      
      <tag>yumaPro</tag>
      
      <tag>yang_cli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yumaPro Edit Callback Overview</title>
    <link href="/2023/09/28/EDIT2/"/>
    <url>/2023/09/28/EDIT2/</url>
    
    <content type="html"><![CDATA[<h1 id="EDIT2-md"><a href="#EDIT2-md" class="headerlink" title="EDIT2.md"></a>EDIT2.md</h1><h3 id="Database-Operations-数据库操作"><a href="#Database-Operations-数据库操作" class="headerlink" title="Database Operations | 数据库操作"></a>Database Operations | 数据库操作</h3><p>服务器数据库的设计使得 SIL 回调函数不需要真正知道服务器正在使用哪个数据库模型（例如，目标是 <candidate> 与 <running> 配置）。<br>SIL 数据库编辑回调阶段分为三个阶段：</p><ol><li>Validate：无论目标数据库是什么，都需要检查参数   </li><li>Apply: 服务器将根据需要操作数据库节点。除非需要预留内部资源，否则 SIL 通常在此阶段无事可做。</li><li>Commit or Rollback: 根据前面阶段的结果，如果更改将在运行配置中最终确定，则将调用提交或回滚回调阶段.</li></ol><p>SIL 代码不负责维护任何数据库的值树。这是由服务器完成的。</p><p>SIL 数据库编辑回调代码负责以下任务：</p><ul><li><p>在验证阶段执行机器可读语句尚未涵盖的任何数据模型特定验证。</p></li><li><p>在应用阶段，为建议的新配置内容保留任何数据模型特定资源。</p></li><li><p>在提交阶段，根据新的配置内容激活任何数据模型行为更改。</p></li><li><p>在回滚阶段释放先前在应用阶段分配的所有保留资源。</p></li></ul><p>YANG“config”语句用于标识NETCONF和RESTCONF中的配置数据节点。</p><ul><li>如果配置&#x3D;’true’：<ul><li>数据节点可编辑，支持EDIT1或EDIT2回调</li><li>如果启用NMDA，则可以使用 GET2 回调检索操作数据节点</li><li>NETCONF 客户端可以通过以下操作检索数据：<br> <get><br> <get-bulk><br> <get-config><br> <get-data></li></ul></li><li>如果配置&#x3D;’false’：<ul><li>数据节点不可编辑，支持GET1或GET2回调</li><li>NETCONF 客户端可以通过以下操作检索数据：<br><get><br><get-bulk><br><get-data></li></ul></li></ul><p>每个回调类型都有自己的回调API函数原型，并且每个回调都有自己需要使用的注册和注销函数。该代码通常由yangdump-sdk自动生成。</p><hr><h3 id="Edit-Callback-Overview"><a href="#Edit-Callback-Overview" class="headerlink" title="Edit Callback Overview"></a>Edit Callback Overview</h3><p>####获取当前编辑事务ID</p><p>为了确定编辑事务是否正在进行中，可以使用 API:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"> &gt; <span class="hljs-type">ncx_transaction_id_t</span>  <span class="hljs-title function_">agt_cfg_txid_in_progress</span> <span class="hljs-params">( <span class="hljs-type">ncx_cfg_t</span> cfgid )</span> <br> Parameters:<br>cfgid --  要检查的配置 ID<br>Returns --  正在进行的交易的 txid，如果没有则为 0<br><br>该返回当前正在进行的事务ID：<br>如果此函数返回的 transaction-id 为零，则表示没有事务正在进行。<br><br>Example: 获取正在运行的数据存储的当前事务 ID<br>&gt; <span class="hljs-type">ncx_transaction_id_t</span> txid = agt_cfg_txid_in_progress(NCX_CFGID_RUNNING);<br><br><br></code></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
    
    
    
    <tags>
      
      <tag>SDN</tag>
      
      <tag>YumaPro</tag>
      
      <tag>Netconf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写点什么</title>
    <link href="/2023/09/01/write/"/>
    <url>/2023/09/01/write/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要写？"><a href="#为什么要写？" class="headerlink" title="为什么要写？"></a>为什么要写？</h2><h3 id="应对与反思"><a href="#应对与反思" class="headerlink" title="应对与反思"></a>应对与反思</h3><p>我写作是因为写作帮助我应对生活。和朋友倾诉总是有助于渡过难关，但有时朋友很忙，或者我不想打扰他们，或者我不太愿意谈论一些特别的事情。在特别困难的时候，我可能一开始就觉得我什至没有亲密的朋友。这是写作有帮助的时候；期刊永远不会不听你的。我可以在纸上发泄而不用担心被评判，当我说出自己的想法和感受时，我可以开始理解事物。刚开始写的时候，我的话可能是一连串的废话和情绪化，但一旦它们写在纸上，我就可以开始整理我的想法了。是什么惹恼了我？为什么？我能做些什么来处理这种情况？</p><p>这种想法也有助于我最大限度地利用时间。通过经常反思，我很快就能确定什么对我最有意义，以及什么只是浪费精力。与其盲目地追随生活十年，然后想知道时间都去哪儿了，这有助于我在做事时更有目的性。</p><h3 id="记住"><a href="#记住" class="headerlink" title="记住"></a>记住</h3><p>写作是为了让我有一些东西可以回顾。我完全赞成前进而不是停留在过去，但我也希望能够看到我去过的地方。记住快乐时光的感觉很好，同样，记住奋斗的感觉也很好。很高兴能够看到我做了什么以及我走了多远。它有助于保持正确的生活。</p><p>我希望通过写来保持记忆。等我老了，有一些该死的故事可讲。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>写作帮助我成为更好的沟通者。这可能是显而易见的，但值得一提。在写作中——无论是写日记、发泄、自以为是，还是其他任何事情——你会练习将抽象的感受和想法转化为具体的文字的能力</p><p>写作使你以有力的方式与他人分享经验；通过您的言语，其他人可以与你建立联系并了解您的感受。想想你最喜欢的书和电影；通常，这些作品之所以强大，是因为读者或观众可以与角色建立深层次的联系，并真正站在角色的立场上。这听起来可能很傻，但我认为学习向他人展示你的世界是有道理的。</p><h3 id="帮助别人"><a href="#帮助别人" class="headerlink" title="帮助别人"></a>帮助别人</h3><p>结构化写作通常对其他人有用；例如，我写这个博客是希望有人能找到有用的教程或解释。但是，即使您不与任何人分享，您对生活进展的漫谈和咆哮也会有所帮助！</p><p>当你在你之前经历过的困难时期向某人提供建议时，非结构化的漫谈会有所帮助。当您不记得在那种情况下是什么样子时，提供建议通常是无益的，甚至可能是危险的。通常，您要么知道在这种情况下会是什么样子（因为您身处其中），要么您知道事后的结果，但不是两者都知道。我们通常不会（详细地）记得困难时期；动机性遗忘理论表明我们倾向于忘记困难的记忆，而关于“乐观回顾”的研究” 发现我们经常记得过去比我们经历过的更积极。当有人就我们过去经历过的艰难处境征求意见时，我们通常只能回顾一下我们的想法，就像任何人都可能做的那样——除非我们写下经历那段经历的感受时间！</p><p>在高中时，我在自我价值、决定去哪里上大学、与他人建立联系等等方面苦苦挣扎。当有人向我寻求帮助时，我总是先看看我写的东西。经历那些时光是什么感觉？对我有什么帮助？我最终是如何度过难关的？我希望有人告诉我什么？因为我写了，所以我记得经历那些时光是什么感觉，也许更重要的是，我记得挺身而出的感觉。</p><h3 id="我应该写些什么"><a href="#我应该写些什么" class="headerlink" title="我应该写些什么"></a>我应该写些什么</h3><p>任何你想要的。任何写作都可以是有帮助的写作。但是，以下是一些可以帮助您入门的事情：</p><p>写下你的一天。正如我提到的，当我遇到困难时，我经常这样做。我会写下发生的事情，然后写下我想到的想法。我也试着写快乐的日子，但我通常没有动力去做这件事。</p><p>写下你读过的东西。有什么新的或值得注意的想法吗？你怎么看这件事？你的回应是什么？昨晚，我读了一篇文章，内容是 关于一些人将 CS 101 课程作为实际的音乐课程进行教学，其中还涵盖了 CS 基础知识。我从来没有听说过这个，所以我写下了一些关键要点和我对这种方法的看法。<br>写下一个困扰你的想法。有时我会写一些一直在我脑海中的哲学思想。更多的时候有时我会写一个与计算机科学相关的想法，<br>或者我会写我的兄弟们，或者我反思我对生活的总体感受。这可能是我一直在想的任何事情。有时我会写下我在淋浴时的想法。</p><p>写一个故事。挑出最近发生的一件事情，然后生动详细地描述它。那时谁在那里？他们脸上的表情是什么样的？在那里感觉如何？谁穿了什么？这是美好的一天吗，微风轻拂，阳光照耀得恰到好处？或者事情发生在室内？房间光线充足，还是昏暗且有霉味？尝试这样写，让其他人可以通过你的文字体验这种体验。</p><h3 id="我应该怎么写？"><a href="#我应该怎么写？" class="headerlink" title="我应该怎么写？"></a>我应该怎么写？</h3><p>有些人更喜欢用纸和笔书写。一些研究表明，手写可以帮助您更有创造力。就个人而言，我更喜欢打字；</p><p>对于写作时是否应该听音乐，人们也有不同的看法。如果我脑子里有很多东西急着要写在纸上，那么我会经常在没有音乐的情况下写作，听音乐可以帮助我进入奇妙的区域。我总是选择没有歌词的音乐——简单的电子音乐或管弦乐，节奏强劲的音乐可能会分散我的注意力——但在你那里可能会有所不同。</p><p>概述有时会有所帮助。有时候没时间写完整，就把想说的点写下来，整理一下，再扩充成完整的文章。</p><p>一个常见的借口是“我没有时间写”。如果你很忙，每天只留出十分钟来写作。只要十分钟就会有不同！如果你连十分钟都抽不出，你可能想想想你是如何打发时间的……</p><p>我认为最重要的是简单地找到一个不会被打扰的地方，然后去做。不要担心任何人的想法。你不需要分享你的作品；你为你而写。不好听也没关系。到处都是拼写和语法错误也没关系。写吧！</p>]]></content>
    
    
    
    <tags>
      
      <tag>感觉</tag>
      
      <tag>随想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test Markdown 基本语法</title>
    <link href="/2023/08/18/TestMarkdown/"/>
    <url>/2023/08/18/TestMarkdown/</url>
    
    <content type="html"><![CDATA[<p>#Markdown 基本语法<br>Markdown的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h3><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别</p><h1 id="Heading-level-1-一级标题"><a href="#Heading-level-1-一级标题" class="headerlink" title="Heading level 1    一级标题"></a>Heading level 1    一级标题</h1><h2 id="Heading-level-2-二级标题"><a href="#Heading-level-2-二级标题" class="headerlink" title="Heading level 2    二级标题"></a>Heading level 2    二级标题</h2><h3 id="Heading-level-3-三级标题"><a href="#Heading-level-3-三级标题" class="headerlink" title="Heading level 3    三级标题"></a>Heading level 3    三级标题</h3><h4 id="Heading-level-4-四级标题"><a href="#Heading-level-4-四级标题" class="headerlink" title="Heading level 4    四级标题"></a>Heading level 4    四级标题</h4><h5 id="Heading-level-5-五级标题"><a href="#Heading-level-5-五级标题" class="headerlink" title="Heading level 5    五级标题"></a>Heading level 5    五级标题</h5><h6 id="Heading-level-6-六级标题"><a href="#Heading-level-6-六级标题" class="headerlink" title="Heading level 6    六级标题"></a>Heading level 6    六级标题</h6><p> More info: <a href="https://markdown.com.cn/basic-syntax/headings.html">标题语法</a>  </p><blockquote><p><strong>注：</strong>不同的 Markdown 应用程序处理 # 和标题之间的空格方式并不一致。为了兼容考虑，请用一个空格在 # 和标题之间进行分隔。  </p></blockquote><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>要创建段落，请使用空白行将一行或多行文本进行分隔。</p><p>More info: <a href="https://markdown.com.cn/basic-syntax/paragraphs.html">段落</a></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(<br>)。</p><p>几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的 <br> 标签。</p><p>More info: <a href="https://markdown.com.cn/basic-syntax/line-breaks.html">换行</a></p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>**粗体（Bold）  –要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores） **</p><p><em>斜体（Italic）  –单词或短语前后添加一个星号（asterisk）或下划线（underscore）</em></p><p><em><strong>粗体（Bold）和斜体（Italic）  –三个星号或下划线</strong></em></p><p>More info: <a href="https://markdown.com.cn/basic-syntax/emphasis.html">强调</a></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>###要创建块引用，请在段落前添加一个  <code>&gt;</code>  符号。</p><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><blockquote><p>test</p></blockquote><ul><li>123</li><li>123</li><li>123</li></ul></blockquote><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol><h3 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h3><p>要将单词或短语表示为代码，请将其包裹在反引号 (&#96;) 中。</p><pre><code class="hljs">`要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。voidimi_onm_init(struct lib_globals *zg)&#123;struct onm_client *oc = NULL;/* Create ONM client for ELMI */oc = onm_client_create (zg, 0);if (!oc)    return;printd(&quot;[%s:%d]   imi_onm_init  &amp;  onm_client_create \n&quot;,__func__, __LINE__);/* Set version and protocol.  */onm_client_set_version (oc, ONM_PROTOCOL_VERSION_1);onm_client_set_protocol (oc, IPI_PROTO_IMI);/* Set required services. *///    onm_client_set_service (oc, ONM_SERVICE_DESCRIBTION);/* ONM message callbacks. */onm_client_set_callback (oc, ONM_MSG_SERVICE_REPLY, imi_onm_recv_service);onm_client_set_callback (oc, ONM_MSG_DESCRIBTION, imi_onm_recv_lldp_describtion);/* Set disconnect handling callback */onm_client_set_disconnect_callback (oc, imi_onm_disconnect_process);/* Adding delay to start onm_client to let ecpd learn NSM update first followed *by ONM updates; ZebOS00078427 */onm_client_start (oc);&#125;`</code></pre><p>More info: <a href="https://markdown.com.cn/extended-syntax/fenced-code-blocks.html">围栏代码块</a></p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容</p><pre><code class="hljs">***---_____________</code></pre><hr><hr><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h3><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。</p><p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;) </code></p><p>对应的HTML代码： <code>&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt;</code></p><pre><code class="hljs">这是一个链接 [Markdown语法](https://markdown.com.cn)。</code></pre><p>渲染效果如下：</p><p>这是一个链接 <a href="https://markdown.com.cn/">Markdown语法</a>。</p><p>More info: <a href="https://markdown.com.cn/basic-syntax/links.html">链接语法</a></p><h3 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h3><p>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><p>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)。</code></p><p>对应的HTML代码：<code>&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code></p><pre><code class="hljs">![这是图片](/assets/img/philly-magic-garden.jpg &quot;Magic Gardens&quot;)</code></pre><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p><pre><code class="hljs">\* Without the backslash, this would be a bullet in an unordered list.</code></pre><p>渲染效果如下：</p><p>* Without the backslash, this would be a bullet in an unordered list.</p><p>More info: <a href="https://markdown.com.cn/basic-syntax/escaping-characters.html">转义字符</a></p><h3 id="内嵌-HTML-标签"><a href="#内嵌-HTML-标签" class="headerlink" title="内嵌 HTML 标签"></a>内嵌 HTML 标签</h3><p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身<br>如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。</p><p>More info: <a href="https://markdown.com.cn/basic-syntax/htmls.html">内嵌 HTML 标签</a></p><hr><hr><h2 id="More-Info"><a href="#More-Info" class="headerlink" title="More Info"></a>More Info</h2><p> <a href="https://markdown.com.cn/extended-syntax/">Markdown 扩展语法</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yumaPro How do I use GET2 callback?</title>
    <link href="/2023/08/17/GET2/"/>
    <url>/2023/08/17/GET2/</url>
    
    <content type="html"><![CDATA[<p>GET2 回调函数对每个对象模板使用 1 个回调。服务器将通过此 API 发出“get”和“getnext”请求，回调代码将返回它所管理的数据的值节点。这些数据节点不在服务器数据树中维护。它们不会缓存在服务器中。</p><p>这些回调在调用时应返回部分或全部终端子节点（叶、叶列表、anyxml）。</p><p>GET2 回调从不返回复杂节点的子节点。复杂子节点应注册有自己的 get2 回调。<br>GET2 回调不支持配置数据。<br>请参阅 <a href="https://yumaworks.freshdesk.com/support/solutions/articles/1000285632">GET2 All In One (AIO)</a> 回调，一次性检索复杂节点。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SDN</tag>
      
      <tag>YumaPro</tag>
      
      <tag>Netconf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/27/hello_world/"/>
    <url>/2023/07/27/hello_world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>我决定开一个博客。我早就考虑开始写一个，但我从来不知道该写什么。<br>常常感觉科技中的每一个问题都已经在其他人的博客上得到了充分的解释，而且比我做的还要好。然而，事情并非总是如此。很多时候，我必须做几次谷歌搜索才能找出问题所在。有时，在花几个小时跳谷歌舞并搜索互联网之后，我拼凑出一个解决方案来解决实际上没有在任何人的博客上描述的问题。我意识到，我可以写的正是这些解决方案。当然，任何有头脑的人都可以自己解决问题，但通过博客，我可能会为未来的 搜索节省一些时间。我还发现写作可以帮助我跟踪我已经解决的问题，并帮助其他人更好地了解我花时间做的事情。我总是纠结于“告诉我你在这个项目中遇到的一些挑战”或“你处理过的最困难的错误是什么”这样的面试问题，不幸地是，我很倾向于忘记我做过的事情。开始做接下来的事情。是的！这个博客可以作为我做过的一些事情的记录，我只需要阅读我写的东西来刷新我的想法。也许我对写博客最大的反对是我觉得我没有足够的时间来写它。碰巧，这仍然是一个反对意见。 我计划一有机会就写，但这个博客和其他任何东西一样都是一个实验。我正在试一试 Jekyll 和 Octopress 3，虽然我以后可能会尝试其他平台。为了实现这一目标，我坚持使用默认的 Octopress 主题（令完美主义者感到恐惧），但它实际上一点也不差。所以，现在我有一个博客了! </p><p> <a href="https://reberhardt.com/blog/2016/01/30/hello-world.html">Hello,world</a> –Ryan</p>]]></content>
    
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ok, Let&#39;s getting started with...</title>
    <link href="/2023/07/27/start/"/>
    <url>/2023/07/27/start/</url>
    
    <content type="html"><![CDATA[<p>该从哪开始 …   …</p>]]></content>
    
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
